package org.lambot3478.autonomous_steps;

import org.lambot3478.autonomous_step.AutonomousStep_Drive;
import org.usfirst.frc.team3478.robot.Robot;
import org.usfirst.frc.team3478.robot.RobotMap;

import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Timer;

public class VectorMoveTime extends AutonomousStep_Drive{
	private Timer timer;
	private double power;
	private double time;
	private double translationAngle;
	
	public VectorMoveTime(double translationAngle,double power,double time){
		super();
		this.translationAngle=translationAngle;
		this.power=power;
		this.time=time;
	}
	@Override
	public void start() {
		timer=new Timer();
		timer.start();
		
	}

	@Override
	public void run() {
		double rotationGain;
		// Calcula el angulo del vector
		double angle=(translationAngle+180)*Math.PI/180+(Math.PI/4);
		
		
		// Show the translation angle on the dashboard
		rotationGain=(front-gyro.getAngle())/22.5;
		
		talons[0].set(ControlMode.PercentOutput,power*
				Math.sin(angle)-rotationGain);
		talons[1].set(ControlMode.PercentOutput,power*
				Math.cos(angle)+rotationGain);
		talons[2].set(ControlMode.PercentOutput,power*
				Math.cos(angle)-rotationGain);
		talons[3].set(ControlMode.PercentOutput,power*
				Math.sin(angle)+rotationGain);
	}
	/*private boolean limitIsReached(){
		if(limitType==DRIVE_LIMIT_TIME){
			if(timer==null){
				timer=new Timer();
				timer.start();
			}
			if(timer.get()<limit)
				return false;
		}
		else if(limitType==DRIVE_LIMIT_DISTANCE){
			if(encoders==null){
				encoders=new Encoder[]{RobotMap.DriveEL,RobotMap.DriveER};
				for(Encoder encoder:encoders){
					encoder.reset();
				}
			}
			if(encoders[0].getDistance()<limit&&encoders[1].getDistance()<limit)
				return false;
		}
		else if(limitType==DRIVE_LIMIT_ROTATION){
			if(heading==null){
				heading=Robot.Robot_heading;
				initialHeading=heading.getRotation();
			}
			if(Math.abs(heading.getRotation()-initialHeading)<limit)
				return false;
		}
		return true;
	}*/
	@Override
	public boolean isFinished() {
		if(timer==null){
			timer=new Timer();
			timer.start();
		}
		if(timer.get()<time)
			return false;
		return true;
	}

}
